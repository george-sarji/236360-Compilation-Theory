%{
    #include "hw3_output.hpp"
    #include <iostream>
    #include "Semantics.h"
    using namespace std;

    extern int yylex();
    extern int yylineno;
    int yyerror(const char* message);
%}

/* Tokens section */

/* Add all the reserved keywords that have no left or right association */
%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc IF;
%nonassoc ELSE;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left EQ_RELOP;
%nonassoc RELOP;
%left ADD_BINOP;
%left BINOP;
%right NOT;
%left RBRACE;
%left LBRACE;
%left RPAREN;
%left LPAREN;

%%

/* Rules section */

Program: Funcs                                                              { output::printProductionRule(1); }
Funcs:                                                                      { output::printProductionRule(2); }
    | FuncDecl Funcs                                                        { output::printProductionRule(3); }
FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE         { output::printProductionRule(4); }
RetType: Type                                                               { output::printProductionRule(5); }
    | VOID                                                                  { output::printProductionRule(6); }
Formals:                                                                    { output::printProductionRule(7); }
    | FormalsList                                                           { output::printProductionRule(8); }
FormalsList: FormalDecl                                                     { output::printProductionRule(9); }
    | FormalDecl COMMA FormalsList                                          { output::printProductionRule(10); }
FormalDecl: Type ID                                                         { output::printProductionRule(11); $$ = new FormalDecl(dynamic_cast<Type*>($1), $2); }
Statements: Statement                                                       { output::printProductionRule(12); $$ = new Statements(dynamic_cast<Statement*>($1)); }
    | Statements Statement                                                  { output::printProductionRule(13); $$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2)); }
Statement: LBRACE Statements RBRACE                                         { output::printProductionRule(14); }
    | Type ID SC                                                            { output::printProductionRule(15); $$ = new Statement(dynamic_cast<Type*>($1), $2); }
    | Type ID ASSIGN Exp SC                                                 { output::printProductionRule(16); $$ = new Statement(dynamic_cast<Type*>($1), $2, dynamic_cast<Exp*>($4)); }
    | ID ASSIGN Exp SC                                                      { output::printProductionRule(17); $$ = new Statement($1, dynamic_cast<Exp*>($3)); }
    | Call SC                                                               { output::printProductionRule(18); $$ = new Statement(dynamic_cast<Call*>($1)); }
    | RETURN SC                                                             { output::printProductionRule(19); $$ = new Statement($1); }
    | RETURN Exp SC                                                         { output::printProductionRule(20); $$ = new Statement(dynamic_cast<Exp*>($2)); }
    | IF LPAREN Exp RPAREN Statement %prec IF                               { output::printProductionRule(21); $$ = new Statement(dynamic_cast<Exp*>($3), dynamic_cast<Statement*>($5)); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement                         { output::printProductionRule(22); $$ = new Statement(dynamic_cast<Exp*>($3), dynamic_cast<Statement*>($5), dynamic_cast<Statement*>($7)); }
    | WHILE LPAREN Exp RPAREN Statement                                     { output::printProductionRule(23); $$ = new Statement(dynamic_cast<Exp*>($3), dynamic_cast<Statement*>($5)); }
    | BREAK SC                                                              { output::printProductionRule(24); $$ = new Statement($1); }
    | CONTINUE SC                                                           { output::printProductionRule(25); $$ = new Statement($1); }
Call: ID LPAREN ExpList RPAREN                                              { output::printProductionRule(26); $$ = new Call($1, dynamic_cast<ExpList*>($3)); }
    | ID LPAREN RPAREN                                                      { output::printProductionRule(27); $$ = new Call($1); }
ExpList: Exp                                                                { output::printProductionRule(28); $$ = new ExpList(dynamic_cast<Exp*>($1)); }
    | Exp COMMA ExpList                                                     { output::printProductionRule(29); $$ = new ExpList(dynamic_cast<Exp*>($1), dynamic_cast<ExpList*>($3)); }
Type: INT                                                                   { output::printProductionRule(30); $$ = new Type($1); }
    | BYTE                                                                  { output::printProductionRule(31); $$ = new Type($1); }
    | BOOL                                                                  { output::printProductionRule(32); $$ = new Type($1); }
Exp: LPAREN Exp RPAREN                                                      { output::printProductionRule(33); $$ = new Exp(dynamic_cast<Exp*>($2)); }
    | Exp ADD_BINOP Exp                                                     { output::printProductionRule(34); $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), false); }
    | Exp BINOP Exp                                                         { output::printProductionRule(34); $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), false); }
    | ID                                                                    { output::printProductionRule(35); $$ = new Exp($1); }
    | Call                                                                  { output::printProductionRule(36); $$ = new Exp(dynamic_cast<Call*>($1)); }
    | NUM                                                                   { output::printProductionRule(37); $$ = new Exp($1, "NUM"); }
    | NUM B                                                                 { output::printProductionRule(38); $$ = new Exp($1, "NUM B"); }
    | STRING                                                                { output::printProductionRule(39); $$ = new Exp($1, "STRING"); }
    | TRUE                                                                  { output::printProductionRule(40); $$ = new Exp($1, "BOOL"); }
    | FALSE                                                                 { output::printProductionRule(41); $$ = new Exp($1, "BOOL"); }
    | NOT Exp                                                               { output::printProductionRule(42); $$ = new Exp($1, dynamic_cast<Exp*>($2)); }
    | Exp AND Exp                                                           { output::printProductionRule(43); $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), false); }
    | Exp OR Exp                                                            { output::printProductionRule(44); $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), false); }
    | Exp EQ_RELOP Exp                                                      { output::printProductionRule(45); $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), true); }
    | Exp RELOP Exp                                                         { output::printProductionRule(45); $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), true); }
    | LPAREN Type RPAREN Exp                                                { output::printProductionRule(46); $$ = new Exp(dynamic_cast<Type*>($2), dynamic_cast<Exp*>($4)); }

%%

/* Functions section */

int main()
{
    return yyparse();
}

int yyerror(const char* message)
{
    output::errorSyn(yylineno);
    exit(0);
}